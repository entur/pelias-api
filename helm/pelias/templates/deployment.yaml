apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "app.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels" . | indent 4 }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "app.name" . }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "common.labels" . | indent 8 }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image.identifier }}
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}
        env:
         - name: TZ
           value: Europe/Oslo
        resources:
          limits:
            memory: {{ .Values.resources.memLimit }}
          requests:
            cpu: {{ .Values.resources.cpuRequest }}
            memory: {{ .Values.resources.memRequest }}
        ports:
         - containerPort: {{ .Values.service.http.internalPort }}
           protocol: TCP
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: {{ .Values.service.http.internalPort }}
          timeoutSeconds: 5
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - name: elasticsearch
        image: {{ .Values.secondaryImage.identifier }}
        imagePullPolicy: {{ .Values.secondaryImage.imagePullPolicy }}
        lifecycle:
          preStop:
            exec:
              command:
                - /bin/sh
                - -c
                - sleep 30
        env:
         - name: TZ
           value: Europe/Oslo
         - name: GCS_BASE_PATH
           value: {{.Values.gcpBasePath}}
        ports:
        - containerPort: {{ .Values.secondaryImage.containerPort }}
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: _cluster/health?wait_for_status=yellow&timeout=120s
            port: {{ .Values.secondaryImage.containerPort }}
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            memory: {{ .Values.secondaryImage.resources.memLimit }}
          requests:
            cpu: {{ .Values.secondaryImage.resources.cpuRequest }}
            memory: {{ .Values.secondaryImage.resources.memRequest }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - name: nibiru
        image: {{ .Values.nibiruImage.identifier }}
        imagePullPolicy: {{ .Values.nibiruImage.imagePullPolicy }}
        env:
          - name: JDK_JAVA_OPTIONS
            value: -server -Xmx{{ .Values.nibiruImage.resources.xmx }} -Dspring.config.location=/etc/application-config/application.properties
              -Dfile.encoding=UTF-8
          - name: TZ
            value: Europe/Oslo
        resources:
          limits:
            memory: {{ .Values.nibiruImage.resources.memLimit }}
          requests:
            cpu: {{ .Values.nibiruImage.resources.cpuRequest }}
            memory: {{ .Values.nibiruImage.resources.memRequest }}
        volumeMounts:
          - mountPath: /etc/application-config
            name: application-config
            readOnly: true
        ports:
          - containerPort: {{ .Values.nibiruImage.containerPort }}
            name: http
            protocol: TCP
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /actuator/health/liveness
            port: {{ .Values.nibiruImage.healthPort }}
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 15
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: _cluster/health?wait_for_status=yellow&timeout=120s
            port: {{ .Values.secondaryImage.containerPort }}
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop: [ "ALL" ]
          seccompProfile:
            type: RuntimeDefault
          runAsGroup: 1000
          runAsUser: 1000
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccount: application
      serviceAccountName: application
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: application-config
          configMap:
            name: nibiru-config
            defaultMode: 420

